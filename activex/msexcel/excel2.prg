//////////////////////////////////////////////////////////////////////
//
//  EXCEL2.PRG
//
//  Copyright:
//   Alaska Software, (c) 2002-2025. All rights reserved.         
//  
//  Contents:
//   This sample demonstrates the generation of an Excel sheet, data 
//   insertion from a DBF table and appropriate formatting of the 
//   resulting Excel sheet.
//   
//  Remarks:
//   An Excel file (workbook) consists of one or more Excel sheets. A 
//   sheet has rows and columns, which contain data or formulas. 
//   Page size, header, footer and the page orientation is specified 
//   on a per-sheet basis.
//   
//   Activex.ch is provided as part of a standard Xbase++ installation. 
//   excel.ch was generated by the tlb2ch utility, which also comes
//   with Xbase++. The tlb2ch utility creates a ready-to-use .CH file 
//   with all constants related to a specific ActiveX component. For 
//   more details please refer to the Xbase++ Online Docs.
//   
//  Syntax:
//   
//  Return:
//   
//////////////////////////////////////////////////////////////////////


#include "activex.ch"
#include "excel.ch"

//////////////////////////////////////////////////////////////////////
// Load and configure required DatabaseEngine
//////////////////////////////////////////////////////////////////////
PROCEDURE DbeSys()
  DbeLoad("FOXDBE")
  DbeLoad("CDXDBE")
  DbeBuild("FOXCDX","FOXDBE","CDXDBE")
RETURN


//////////////////////////////////////////////////////////////////////
// Main entry point of the application
//////////////////////////////////////////////////////////////////////
PROCEDURE main
  LOCAL oExcel, oBook, oSheet
  LOCAL cDir, nRow

  // Create the "Excel.Application" object
  oExcel := CreateObject("Excel.Application")
  IF Empty( oExcel )
    MsgBox( "Excel is not installed" )
    RETURN
  ENDIF

  // Avoid message boxes such as "File already exists". Also,
  // ensure the Excel application is visible.
  oExcel:DisplayAlerts := .F.
  oExcel:visible       := .T.

  // Add a workbook to the Excel application. Query for 
  // the active sheet (sheet-1) and set up page/paper 
  // orientation.
  cDir := CurDrive()+":\"+CurDir()
  oBook  := oExcel:workbooks:Add()
  oSheet := oBook:ActiveSheet
  oSheet:PageSetup:Orientation := xlLandscape

  // Open source table, reset the row counter used
  // to determine the row# inside the excel
  // sheet later on.
  Set(_SET_DEFAULT, cDir + "\..\..\data\misc" )
  DbeSetDefault("FOXCDX")
  USE "PARTS.DBF" EXCLUSIVE
  DbGoTop()
  nRow := 1

  // Format the columns. Column #1 is for the part
  // name, all others visualize numerice values
  oSheet:Columns( 2 ):NumberFormat := "0.00"
  oSheet:Columns( 3 ):NumberFormat := "0.00"

  // Feed in the data from the table to the Cells
  // of the sheet.
  ? "Copy the values from the DBF table"
  DO WHILE !EOF()
    oSheet:Cells(nRow,1):Value := FIELD->PARTNAME
    oSheet:Cells(nRow,2):Value := FIELD->PURCHASE
    oSheet:Cells(nRow,3):Value := FIELD->SELLPRICE
    nRow++
    DbSkip(1)
  ENDDO

  // Force a reformat for the size of the first column
  oSheet:Columns( 1 ):AutoFit()
  ? oBook:FullName

  // Save workbook as ordinary excel file.
  oBook:SaveAs(cDir+"\MyExcel.xls",xlWorkbookNormal)

  // Quit Excel
  oExcel:Quit()
  oExcel:Destroy()
  WAIT
RETURN
