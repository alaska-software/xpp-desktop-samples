//////////////////////////////////////////////////////////////////////
//
//  MAIN.PRG
//
//  Copyright:
//      Alaska Software, (c) 2015-2025. All rights reserved.         
//  
//  Contents:
//      This example program demonstrates using the XbpHTMLStyle class
//      for developing custom controls. To do this, HTML and CSS are 
//      used to define the visualization of the control, which 
//      includes using transition effects during state changes. In 
//      addition, the behavior of the control is defined. For example, 
//      for when certain HTML elements are clicked using the mouse. 
//      For this, event handlers are bound to individual HTML elements 
//      using the interfaces of the XbpHTMLWindow class.  
//   
//////////////////////////////////////////////////////////////////////

#include "Common.ch"
#include "xbp.ch"
#include "gra.ch"

#pragma library( "adac20b.lib" )

#define EVENTVIEWER_NAMEID    133

PROCEDURE Main
 LOCAL oXbp
 LOCAL oDlg
 LOCAL oEvt

   /*
    * Open the parts table
    */
   SET DEFAULT TO ..\..\data\misc
   OpenParts()

   /*
    * Create the main window with an instance
    * of the custom control. Also create a
    * small window for logging events generated
    * by the user operating the control.
    */
   oDlg := XbpDialog():new( AppDesktop() )
   oDlg:title := "Sliding List Example"
   oDlg:taskList := .T.
   oDlg:drawingArea:colorBG := GRA_CLR_WHITE
   oDlg:drawingArea:clipChildren := .T.
   oDlg:visible  := .F.
   oDlg:create( ,,, {640,400} )
   CenterControl( oDlg )

   oEvt := CreateEventViewer( oDlg )

   oXbp := XbpSlidingList():new( oDlg:DrawingArea )
   oXbp:workArea     := "parts"
   oXbp:itemId       := {|| parts->partno}
   oXbp:itemCaption  := {|| parts->partname}
   oXbp:itemImage    := {|| parts->bmpimage}
   oXbp:itemTexts    := {{"Size:",           {|| parts->parttype}},;
                         {"Purchase Price:", {|| parts->purchase}},;
                         {"Sell Price:",     {|| parts->sellprice}}}
   
   oXbp:itemExpanded := {|oItem| LogEvent("Item [id:" + oItem:Id + "] was expanded.")}
   oXbp:itemCollapsed:= {|oItem| LogEvent("Item [id:" + oItem:Id + "] was collapsed.")}
   oXbp:layoutAlign  := XBPLAYOUT_LEFT  + XBPLAYOUT_TOP + ;
                        XBPLAYOUT_RIGHT + XBPLAYOUT_BOTTOM
   oXbp:create( ,, {0,5}, {520,350} )

   oXbp := XbpPushButton():New( oDlg:DrawingArea )
   oXbp:caption      := "Ok"
   oXbp:default      := .T.
   oXbp:layoutAlign  := XBPLAYOUT_RIGHT + XBPLAYOUT_BOTTOM
   oXbp:create( ,, {530,15}, {80,30} )

   oEvt:show()
   oDlg:showModal()
RETURN


/// <summary>Open the parts table</summary>
PROCEDURE OpenParts()
   USE parts SHARED NEW
RETURN


/// <summary>Create a small auxiliary window for
/// displaying events generated by the user</summary>
/// <param name="oOwner">Object to assign as the
/// owner of the event viewer</param>
/// <returns>Window with the event list</returns>
/// <remarks>
/// The auxiliary window is positioned relative
/// to and moves with the owner 
/// </remarks>
FUNCTION CreateEventViewer( oOwner )
 LOCAL oDlg
 LOCAL aPos
 LOCAL aSize
 LOCAL oXbp

   aPos := oOwner:currentPos()
   aPos[1] += oOwner:currentSize()[1]
   aSize:= oOwner:currentSize()
   aSize[1]:= 250

   oDlg := XbpDialog():new( AppDesktop(), oOwner )
   oDlg:title := "Event Viewer"
   oDlg:taskList := .F.
   oDlg:drawingArea:colorBG := GRA_CLR_WHITE
   oDlg:visible  := .F.
   oDlg:create( ,, aPos, aSize )

   oXbp := XbpListBox():new( oDlg:drawingArea )
   oXbp:layoutAlign := XBPLAYOUT_LEFT  + XBPLAYOUT_BOTTOM + ;
                       XBPLAYOUT_RIGHT + XBPLAYOUT_TOP
   oXbp:create( ,,, {aSize[1]-30,aSize[2]-50} ) 
   oXbp:setName( EVENTVIEWER_NAMEID )
   CenterControl( oXbp )  
RETURN oDlg


/// <summary>Add an event to the event viewer</summary>
/// <param name="cEvent">String with the event
/// to be added</param>
PROCEDURE LogEvent( cEvent )
 LOCAL oXbp

   oXbp := AppDesktop():childFromName( EVENTVIEWER_NAMEID )
   oXbp:addItem( cEvent )
RETURN


/// <summary>Set general display properties of the 
/// application</summary>
PROCEDURE AppSys()
   /*
    * The application uses the ANSI character set 
    * and does not use a console window
    */
   SET CHARSET TO ANSI
RETURN


/// <summary>Set general properties for database 
/// access</summary>
PROCEDURE DbeSys()
   /*
    * Build the FOXCDX compound DBE and make 
    * it the default DBE of the application
    */
   DbeLoad( "FOXDBE" )
   DbeLoad( "CDXDBE" )
   DbeBuild( "FOXCDX", "FOXDBE", "CDXDBE" )
   DbeSetDefault( "FOXCDX" )
RETURN

// EOF
